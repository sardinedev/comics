---
import Layout from "../layouts/Layout.astro";
import IssueSlider from "../components/IssueSlider.astro";
import { thisWeekBookendsDates } from "../util/date";

import type { SingleIssuePreview } from "../components/IssueSlider.astro";
import { getWeeklyComics } from "../util/comicvine";

const { startOfWeek, endOfWeek } = thisWeekBookendsDates();

let weeklyIssues;
let issues: SingleIssuePreview[] = [];
let issuesNewForYou: SingleIssuePreview[] = [];
let upcomingIssues: SingleIssuePreview[] = [];
let continueReading: SingleIssuePreview[] = [];
let recommendedSeries: SingleIssuePreview[] = [];

try {
  weeklyIssues = await getWeeklyComics(startOfWeek, endOfWeek);
  if (weeklyIssues) {
    // const followedSeries = await kvGetFollowSeries(kv);
    issues = weeklyIssues.issues.map((issue) => {
      // const formattedIssue = convertComicvineIssuesToIssue(issue);
      const shortIssueDetails = {
        cover: issue.image.medium_url,
        name: issue.name,
        id: issue.id,
      };
      // if (followedSeries?.series.includes(issue.volume.id.toString())) {
      //   issuesNewForYou.push(shortIssueDetails);
      // }
      return shortIssueDetails;
    });
  }
} catch (error) {
  console.error(error);
}
---

<Layout title="New this week">
  {
    issuesNewForYou.length > 0 ? (
      <>
        <h2 class="text-2xl">New for you</h2>
        <p class="text-sm mb-4">
          There are {issuesNewForYou.length} new comics this week from series
          you follow.
        </p>
        <IssueSlider issues={issuesNewForYou} />
      </>
    ) : (
      <p class="text-sm mb-4">
        There are no new comics this week for series you follow.
      </p>
    )
  }
  {
    weeklyIssues ? (
      <>
        <h2 class="text-2xl">New this week</h2>
        <p class="text-sm mb-4">
          There are {weeklyIssues.totalResults} new comics this week.
        </p>
        <IssueSlider issues={issues} />
      </>
    ) : null
  }
</Layout>
