---
import IssueSlider from "../../../components/IssueSlider.astro";
import Layout from "../../../layouts/Layout.astro";
import { kvGetComicIssue, kvGetVolume } from "../../api/kv";

import type { ComicvineSingleIssueResponse } from "../../api/comicvine.types";
import type { SingleIssuePreview } from "../../../components/IssueSlider.astro";

const kv = Astro.locals.runtime.env.COMICS;
const { id } = Astro.params;
let data;
let issuesInSeries: SingleIssuePreview[] = [];
try {
  if (id) {
    data = await kvGetComicIssue(id, kv);
    if (data) {
      const volume = await kvGetVolume(data.volume.id, kv);
      if (volume) {
        const issues = volume.issues
          .reverse()
          .slice(0, 10)
          .map((issue) => issue.id);
        const _issuesInSeries = await Promise.all(
          issues.map((issueId) => kvGetComicIssue(issueId, kv))
        );
        issuesInSeries = _issuesInSeries
          .filter(
            (issue): issue is ComicvineSingleIssueResponse =>
              issue !== undefined
          )
          .map((issue) => ({
            id: issue.id,
            name: issue.name,
            cover: issue.image.medium_url,
          }));
      }
    }
  }
} catch (error) {}

const title = data
  ? `${data.volume.name} #${data.issue_number} - ${data.name}`
  : "Issue not found";
---

<Layout title={title}>
  {
    data ? (
      <>
        <h1 class="text-3xl">{data.name}</h1>
        <h2 class="text-lg mb-4">
          {`${data.volume.name} #${data.issue_number}`}
        </h2>
        <img
          class="mb-4"
          src={data.image.medium_url}
          alt={data.name}
          width="421"
          height="640"
          loading="lazy"
        />
        <div set:html={data.description} />

        <h2 class="text-xl mt-8 mb-4">Other issues in series</h2>
        <IssueSlider issues={issuesInSeries} />
      </>
    ) : (
      <p>Issue not found</p>
    )
  }
</Layout>
