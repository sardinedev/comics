---
import Layout from "../../../layouts/Layout.astro";
import CoverStack from "../../../components/CoverStack.astro";
import IssueGrid from "../../../components/IssueGrid/IssueGrid.astro";
import { SortButton } from "../../../components/SortButton";

import { elasticGetSeries } from "../../../util/elastic";
import type { Issue } from "../../../util/comics.types";
import { CoverLeaf } from "../../../components/CoverLeaf/CoverLeaf";

const sort = Astro.url.searchParams.get("sort") === "asc" ? "asc" : "desc";
const page = Astro.url.searchParams.get("page")
  ? Number(Astro.url.searchParams.get("page"))
  : 1;

const { id } = Astro.params;
let volume: Issue[] = [];
let totalIssues = 0;
let isFollowing = false;

try {
  if (id) {
    const { result, totalResults } = await elasticGetSeries(id, {
      sort,
      page,
    });
    volume = result;
    totalIssues = totalResults;
  }
} catch (e) {
  console.error(e);
}
---

<script>
  const followButton = document.getElementById("follow-series");
  if (followButton) {
    followButton.addEventListener("click", async (event) => {
      const volumeId = event?.target?.getAttribute("data-volume");
      if (volumeId) {
        const response = await fetch("/api/followSeries", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ id: volumeId }),
        });
        if (response.ok) {
          followButton.textContent = "Following series";
        }
      }
    });
  }
</script>

<Layout title={volume?.[0].series_name ?? "Error loading volume"}>
  {
    volume ? (
      <>
        <header class="flex flex-col">
          <div>
            <h1>
              <span class="text-4xl">{volume?.[0].series_name}</span> (
              {volume?.[0].series_year})
            </h1>
            <p>{totalIssues} issues</p>
          </div>
          <div class="flex items-end">
            {/* <CoverStack covers={volumeCover} /> */}
          </div>
        </header>
        <section class="mt-8">
          <div class="border-t-2 border-b-2 py-2">
            <SortButton client:idle />
          </div>
          <IssueGrid totalNumberOfIssues={totalIssues} currentPage={page}>
            {volume.map((issue) => (
              <CoverLeaf
                type="Issue"
                id={issue.issue_id}
                cover={issue.issue_cover}
                number={issue.issue_number}
              />
            ))}
          </IssueGrid>
        </section>
      </>
    ) : (
      <p>Error loading volume</p>
    )
  }
</Layout>
