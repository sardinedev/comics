---
import CoverLeaf from "@components/CoverLeaf/CoverLeaf.astro";
import CoverStack from "@components/CoverStack.astro";
import IssueGrid from "@components/IssueGrid/IssueGrid.astro";
import Layout from "@layouts/Layout.astro";
import SortButton from "@components/SortButton.astro";
import type { Issue } from "@util/comics.types";
import { elasticGetSeries } from "@util/elastic";

const sort = Astro.url.searchParams.get("sort") === "asc" ? "asc" : "desc";
const page = Astro.url.searchParams.get("page")
  ? Number(Astro.url.searchParams.get("page"))
  : 1;

const { id } = Astro.params;
let series: Issue[] = [];
let totalIssues = 0;

try {
  if (id) {
    const { result, totalResults } = await elasticGetSeries(id, {
      sort,
      page,
    });
    series = result;
    totalIssues = totalResults;
  }
} catch (e) {
  console.error(e);
}
---

<script>
  const readButton = document.getElementById("series-read");
  if (readButton) {
    readButton.addEventListener("click", async (event) => {
      const issues = document.querySelectorAll("li[data-coverid]");
      const updateDoc = [];
      for (const list of issues.values()) {
        updateDoc.push({
          issue_id: list.getAttribute("data-coverid"),
          issue_read: true,
          series_reading_status: "read",
        });
      }
      if (updateDoc.length > 0) {
        const response = await fetch("/api/bulk-update", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(updateDoc),
        });
        if (response.ok) {
          window.location.reload();
        }
      }
    });
  }
</script>

<Layout title={series?.[0].series_name ?? "Error loading series"}>
  {
    series ? (
      <>
        <header class="flex flex-col">
          <div>
            <h1>
              <span class="text-4xl">{series?.[0].series_name}</span> (
              {series?.[0].series_year})
            </h1>
            <p>{totalIssues} issues</p>
          </div>
          <div class="flex items-end">
            {/* <CoverStack covers={volumeCover} /> */}
          </div>
        </header>
        <section class="mt-8">
          <div class="border-t-2 border-b-2 py-2">
            <SortButton />
            <button type="button" id="series-read" data-series={id}>
              {series?.[0].series_reading_status === "read"
                ? "Mark series unread"
                : "Mark series read"}
            </button>
          </div>
          <IssueGrid totalNumberOfIssues={totalIssues} currentPage={page}>
            {series.map((issue) => (
              <CoverLeaf
                type="Issue"
                id={issue.issue_id}
                cover={issue.issue_cover}
                number={issue.issue_number}
                read={issue.issue_read}
              />
            ))}
          </IssueGrid>
        </section>
      </>
    ) : (
      <p>Error loading series</p>
    )
  }
</Layout>
